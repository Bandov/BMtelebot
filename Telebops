
// Replace 'YOUR_BOT_TOKEN' with your actual Telegram bot token
const BOT_TOKEN = '6063762353:AAExWPodIYWwxnOsowtATDqIZlcePMcQ2BQ';

// Replace 'YOUR_GOOGLE_SHEET_ID' with the ID of your Google Sheet
const SHEET_ID = '1OIBqfKncH_z7IG-ZBLcqpPSRNV7VyK65ORbyel1ZqQg';


// Function to handle incoming updates from Telegram
function processTelegramUpdate(e) {
  const update = JSON.parse(e.postData.contents);
  if (update.message && update.message.text) {
    const chatId = update.message.chat.id;
    const messageText = update.message.text.toLowerCase();

    if (messageText === '/start') {
      startBot(chatId);
    } else if (messageText === '/update') {
      sendPollMessage(chatId);
    }
    
    // Handle other commands or messages if needed
    // ...
  } else if (update.callback_query) {
    processCallbackQuery(update.callback_query);
  }
}

// Function to send a message to the Telegram Bot API
function sendTelegramMessage(chatId, text, options = {}) {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
  const payload = {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify({
      chat_id: chatId,
      text: text,
      ...options
    }),
  };
  UrlFetchApp.fetch(url, payload);
}

// Function to start the bot
function startBot(chatId) {
  sendTelegramMessage(chatId, 'Welcome to the Availability Bot! Use the /update command to update your availability.');
}

// Function to schedule a timed poll on Wednesdays
function scheduleTimedPoll() {
  const triggerDay = 3; // Wednesday (0 - Sunday, 1 - Monday, ..., 6 - Saturday)
  const triggerTime = '10:00'; // 24-hour format
  
  const trigger = ScriptApp.newTrigger('sendPollMessage')
    .timeBased()
    .onWeekDay(triggerDay)
    .atHour(triggerTime.split(':')[0])
    .nearMinute(triggerTime.split(':')[1])
    .create();
  
  PropertiesService.getScriptProperties().setProperty('pollTriggerId', trigger.getUniqueId());
}

// Function to send the availability poll message
function sendPollMessage(chatId) {
  sendTelegramMessage(chatId, 'Please update your availability for this week using the poll below:');
  sendAvailabilityPoll(chatId);
}

// Function to send the availability poll
function sendAvailabilityPoll(chatId) {
  const options = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'Available', callback_data: 'available' },
          { text: 'Not Available', callback_data: 'unavailable' }
        ]
      ]
    }
  };
  
  sendTelegramMessage(chatId, 'Are you available this week?', options);
}

// Function to process callback queries from the availability poll
function processCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const cockhead = callbackQuery.message.chat.first_name; //need to add a case when user = null use chatId add the username to the next column for vlookup
  const callbackData = callbackQuery.data;
  
  if (callbackData === 'available') {
    addAvailability(chatId, cockhead, 'Available');
  } else if (callbackData === 'unavailable') {
    removeAvailability(chatId, 'Unavailable');
  }
  
  // Send an acknowledgement message for the callback query
  sendTelegramMessage(chatId, 'Thank you for your response!');
}

// Function to update the availability in Google Sheets
// change to one sheet append if availble if not available take out name.
function addAvailability(chatId, cockhead, available) {
  const sheetName= 'Available';
  const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(sheetName);
  const lastRow = sheet.getLastRow();
  sheet.getRange(lastRow + 1, 1).setValue(cockhead);
  sendTelegramMessage(chatId, `Thank you! Your availability has been recorded as available.`);
}

//Function to remove the name if unavailable in Google Sheets
function removeAvailability(chatId, unavailable) {
    const sheetName= 'Available';
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(sheetName);

}

// Handler for the incoming Telegram updates
function doPost(e) {
  const update = JSON.parse(e.postData.contents);
  
  if (update.message || update.callback_query) {
    processTelegramUpdate(e);
  }
}

